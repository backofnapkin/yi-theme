---
import IndexPage from "../../layouts/IndexPage.astro";
import SearchTitle from "../../components/SearchTitle.astro";
import { formatDate } from "../../utils/formatDate";
import { sortPostsByDate } from "../../utils/sortPostsByDate";
import { getCollectionByName } from "../../utils/getCollectionByName";

// Helper function to convert category to URL-friendly slug
export function categoryToSlug(category: string) {
  return category.toLowerCase().replace(/\s+/g, '-');
}

// Helper function to convert slug back to original category 
export function slugToCategory(slug: string) {
  // Add your category mappings here
  const categoryMap = {
    'business-calculators': 'Business Calculators',
    'food-business-calculators': 'Food Business Calculators', 
    'lawn-care-calculators': 'Lawn Care Calculators',
    'personal-finance-calculators': 'Personal Finance Calculators',
    'contractor-calculators': 'Contractor Calculators'
  };
  return categoryMap[slug] || slug.replace(/-/g, ' ');
}

export async function getStaticPaths() {
  const posts = await getCollectionByName("blog");
  const calculatorPages = await Astro.glob('../../pages/**/*.astro');
  const filteredCalculatorPages = calculatorPages.filter(page => 
    page.frontmatter && page.frontmatter.category
  );

  const categories = new Set([
    ...posts.map(post => post.data.category),
    ...filteredCalculatorPages.map(page => page.frontmatter.category)
  ]);

  return Array.from(categories).map((category) => ({
    params: { 
      category: categoryToSlug(category) // Convert to URL-friendly slug
    },
    props: { 
      category // Pass original category name
    },
  }));
}

const { category } = Astro.props;
const posts = await getCollectionByName("blog");
const calculatorPages = await Astro.glob('../../pages/**/*.astro');

// Filter using original category name
const categoryPosts = posts.filter(post => post.data.category === category);
const categoryCalculators = calculatorPages.filter(page => 
  page.frontmatter && 
  page.frontmatter.category === category
).map(page => ({
  title: page.frontmatter.title,
  description: page.frontmatter.description,
  date: page.frontmatter.date,
  slug: page.url || page.file.split('/pages/')[1]?.replace('.astro', '')
}));

const allContent = [...categoryPosts, ...categoryCalculators].sort((a, b) => {
  const dateA = new Date(a.data?.date || a.date || 0);
  const dateB = new Date(a.data?.date || b.date || 0);
  return dateB.getTime() - dateA.getTime();
});
---

<IndexPage>
  <SearchTitle label={category}/>
  <ul class="text-skin-base">
    {
      allContent.map((item) => (
        <li style="list-style-type: disc;" class="ml-4 my-2">
          <a href={
            `${'data' in item 
              ? `/${item.slug}` 
              : `/${item.slug.replace(/^\/?/, '')}`}`
          }>
            <span class="mr-4">
              {('data' in item ? item.data.date : item.date) && 
                formatDate('data' in item ? item.data.date : item.date)}
            </span>
            <span class="hover:text-skin-active">
              {'data' in item ? item.data.title : item.title}
            </span>
          </a>
        </li>
      ))
    }
  </ul>

  {allContent.length === 0 && (
    <p class="text-skin-base">No content available in this category yet.</p>
  )}
</IndexPage>
