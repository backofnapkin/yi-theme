import React from 'react';
import { Info, Plus, Trash2, TrendingUp } from 'lucide-react';
import { InputButton } from '../../ui/InputButton';
import { Tooltip } from '../../ui/Tooltip';
import { RangeInput } from '../../ui/RangeInput';
import { DecimalInput } from '../../ui/DecimalInput';

interface RevenueAssumptionsProps {
  formData: {
    units: number;
    revenuePerUnit: number;
    utilizationRate: number;
    supplementaryRevenue: number;
    additionalRevenue: Array<{ name: string; amount: number }>;
  };
  onChange: (field: 'units' | 'revenuePerUnit' | 'utilizationRate' | 'supplementaryRevenue' | 'additionalRevenue', value: any) => void;
}

export const RevenueAssumptions: React.FC<RevenueAssumptionsProps> = ({ formData, onChange }) => {
  const handleAddRevenue = () => {
    onChange('additionalRevenue', [
      ...formData.additionalRevenue,
      { name: '', amount: 0 }
    ]);
  };

  const handleRemoveRevenue = (index: number) => {
    const newRevenue = formData.additionalRevenue.filter((_, i) => i !== index);
    onChange('additionalRevenue', newRevenue);
  };

  const handleRevenueChange = (index: number, field: 'name' | 'amount', value: string | number) => {
    const newRevenue = [...formData.additionalRevenue];
    newRevenue[index] = {
      ...newRevenue[index],
      [field]: value
    };
    onChange('additionalRevenue', newRevenue);
  };

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold text-gray-800 flex items-center gap-2">
        <TrendingUp className="w-5 h-5" />
        Revenue Assumptions
      </h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <DecimalInput
            label={
              <div className="flex items-center gap-2">
                <span>Number of Washer/Dryer Units</span>
                <Tooltip content="Total number of washer and dryer units in your laundromat">
                  <Info className="w-4 h-4 text-gray-400" />
                </Tooltip>
              </div>
            }
            value={formData.units}
            onChange={(value: number) => onChange('units', Math.min(999, value))}
            min={1}
            max={999}
            step={1}
          />
        </div>

        <div>
          <DecimalInput
            label={
              <div className="flex items-center gap-2">
                <span>Revenue per Month per Unit</span>
                <Tooltip content="Average monthly revenue generated by each unit">
                  <Info className="w-4 h-4 text-gray-400" />
                </Tooltip>
              </div>
            }
            value={formData.revenuePerUnit}
            onChange={(value: number) => onChange('revenuePerUnit', Math.min(10000, value))}
            prefix="$"
            min={0}
            max={10000}
            step={10}
          />
        </div>

        <div>
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center space-x-2">
              <label className="block text-sm font-medium text-gray-700">
                Utilization Rate
              </label>
              <Tooltip content="Percentage of time units are in use">
                <Info className="w-4 h-4 text-gray-400" />
              </Tooltip>
            </div>
            <span className="text-sm font-medium text-gray-900">{formData.utilizationRate}%</span>
          </div>
          <RangeInput
            value={formData.utilizationRate}
            onChange={(value: number) => onChange('utilizationRate', value)}
            min={0}
            max={100}
            step={1}
            suffix="%"
          />
        </div>

        <div>
          <DecimalInput
            label={
              <div className="flex items-center gap-2">
                <span>Supplementary Monthly Revenue</span>
                <Tooltip content="Additional revenue from vending machines, detergent sales, etc.">
                  <Info className="w-4 h-4 text-gray-400" />
                </Tooltip>
              </div>
            }
            value={formData.supplementaryRevenue}
            onChange={(value: number) => onChange('supplementaryRevenue', value)}
            prefix="$"
            min={0}
            step={10}
          />
        </div>
      </div>

      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-medium text-gray-800">Additional Revenue Sources</h3>
          <InputButton
            onClick={handleAddRevenue}
            variant="primary"
          >
            <div className="flex items-center gap-2">
              <Plus className="w-4 h-4" />
              Add Revenue Source
            </div>
          </InputButton>
        </div>

        {formData.additionalRevenue.map((revenue, index) => (
          <div key={index} className="flex items-center space-x-4">
            <input
              type="text"
              value={revenue.name}
              onChange={(e) => handleRevenueChange(index, 'name', e.target.value)}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
              placeholder="Revenue source name"
            />
            <DecimalInput
              label=""
              value={revenue.amount}
              onChange={(value: number) => handleRevenueChange(index, 'amount', value)}
              prefix="$"
              min={0}
              step={10}
              className="w-32"
            />
            <button
              onClick={() => handleRemoveRevenue(index)}
              className="p-2 text-red-600 hover:text-red-700"
            >
              <Trash2 className="w-5 h-5" />
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};