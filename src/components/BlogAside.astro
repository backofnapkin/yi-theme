---
import CommentAside from "./CommentAside.astro";
import {comment} from "../consts";
import {getCollectionByName} from "../utils/getCollectionByName";
import getUniqueTags from "../utils/getUniqueTags";
import getCountByCategory from "../utils/getCountByCategory";
import {sortPostsByDate} from "../utils/sortPostsByDate";
import {site} from '../consts';
import {t} from '../i18n/utils';

function categoryToSlug(category) {
  const map = {
    'Business Calculators': 'business-calculators',
    'Food Business Calculators': 'food-business-calculators',
    'Lawn Care Calculators': 'lawn-care-calculators',
    'Personal Finance Calculators': 'personal-finance-calculators',
    'Contractor Calculators': 'contractor-calculators'
  };
  if (map[category]) return map[category];
  return category.toLowerCase().replace(/\s+/g, '-');
}

const allContent = await getCollectionByName('all');
const tagArr = getUniqueTags(allContent);
const categoryCount = getCountByCategory(allContent);
const sortPosts = await sortPostsByDate(allContent);
const resultPosts = sortPosts.splice(0, site.recentBlogSize);

function getPostUrl(post) {
  if (post.collection === 'astro-pages') {
    return post.id.replace('/src/pages', '').replace('.astro', '');
  }
  return `/blog/${post.slug}`;
}
---
<div>
  {Object.keys(categoryCount).length > 0 && (
    <div class="aside-widget">
      <i class="ri-folder-line menu-icon"></i>
      {t('sidebar.categories')}
    </div>
  )}

  {Object.keys(categoryCount).map((category) => (
    <a 
      class="my-1 truncate block hover:text-skin-active" 
      title={category + " (" + categoryCount[category] + ")"} 
      href={"/category/" + categoryToSlug(category)}
    >
      {category === 'uncategorized' ? t('sidebar.uncategorized') : category} ({categoryCount[category]})
    </a>
  ))}
</div>

<div>
  {tagArr.length > 0 && (
    <div class="aside-widget">
      <i class="ri-price-tag-3-line menu-icon"></i>
      {t('sidebar.tags')}
    </div>
  )}

  <div class="flex flex-wrap">
    {tagArr.map((tag) => (
      <a 
        class="inline-block truncate m-1 border p-1 text-sm rounded hover:text-skin-active" 
        title={tag} 
        href={"/tags/" + tag}
      >
        {tag}
      </a>
    ))}
  </div>
</div>

<div>
  <div class="aside-widget">
    <i class="ri-file-line menu-icon"></i>
    {t('sidebar.recentArticle')}
  </div>
  <div class="flex flex-col">
    {resultPosts.map((post) => (
      
        href={getPostUrl(post)}
        class="truncate cursor-pointr mt-1 hover:text-skin-active"
        title={post.data.title}
      >
        {post.data.title}
      </a>
    ))}
  </div>
</div>

{comment.enable && comment.type === "waline" && <CommentAside/>}
